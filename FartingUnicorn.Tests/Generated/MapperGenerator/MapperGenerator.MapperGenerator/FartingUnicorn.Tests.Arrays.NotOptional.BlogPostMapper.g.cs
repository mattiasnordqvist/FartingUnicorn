// <auto-generated/>
using DotNetThoughts.Results;
using System.Text.Json;
using static FartingUnicorn.MapperOptions;

namespace FartingUnicorn.Tests;

// ClassName: BlogPost
// FullName: FartingUnicorn.Tests.Arrays.NotOptional.BlogPost
// Namespace: FartingUnicorn.Tests
// Properties: 1
// HasCreateMapperAttribute: False
// ClassPath: Arrays, NotOptional

// Property 0
// Name: Comments
// TypeName: FartingUnicorn.Tests.Arrays.NotOptional.Comment[]
// IsArray: True
// IsReferenceType: False
// IsNullable: False
// IsOption: False
// EffectiveType: FartingUnicorn.Tests.Arrays.NotOptional.Comment[]


public partial class Arrays
{
    public partial class NotOptional
    {
        public partial class BlogPost
        {
            // hello
            public static Result<BlogPost> MapFromJson(JsonElement jsonElement, MapperOptions mapperOptions = null, string[] path = null)
            {
                if (mapperOptions is null)
                {
                    mapperOptions = new MapperOptions();
                }
                if (path is null)
                {
                    path = ["$"];
                }
                if (jsonElement.ValueKind != JsonValueKind.Object)
                {
                    return Result<BlogPost>.Error(new ValueHasWrongTypeError(path, "Object", jsonElement.ValueKind.ToString()));
                }
                var obj = new BlogPost();

                List<IError> errors = new();
                var isCommentsPropertyDefined = jsonElement.TryGetProperty("Comments", out var jsonCommentsProperty);
                if (isCommentsPropertyDefined)
                {
                    // type = FartingUnicorn.Tests.Arrays.NotOptional.Comment[], isOption = False, isNullable = False
                    if (jsonCommentsProperty.ValueKind == JsonValueKind.Null)
                    {
                        errors.Add(new RequiredValueMissingError([.. path, "Comments"]));
                    }
                    else if (mapperOptions.TryGetConverter(typeof(FartingUnicorn.Tests.Arrays.NotOptional.Comment[]), out IConverter customConverter))
                    {
                        if (jsonCommentsProperty.ValueKind != customConverter.ExpectedJsonValueKind)
                        {
                            errors.Add(new ValueHasWrongTypeError([.. path, "Comments"], customConverter.ExpectedJsonValueKind.ToString(), jsonCommentsProperty.ValueKind.ToString()));
                        }
                        else
                        {
                            var result = customConverter.Convert(typeof(FartingUnicorn.Tests.Arrays.NotOptional.Comment[]), jsonCommentsProperty, mapperOptions, [.. path, "Comments"]);
                            if (result.Success)
                            {
                                obj.Comments = result.Map(x => (FartingUnicorn.Tests.Arrays.NotOptional.Comment[])x).Value;
                            }
                            else
                            {
                                errors.AddRange(result.Errors.Select(x => new MappingError([.. path, "Comments"], x.Message)).ToArray());
                            }
                        }
                    }
                }
                else
                {
                    errors.Add(new RequiredPropertyMissingError([.. path, "Comments"]));
                }
                if(errors.Any())
                {
                    return Result<BlogPost>.Error(errors);
                }
                if(false)/*check if is option*/
                {
                }
                else
                {
                    return Result<BlogPost>.Ok(obj);
                }
                throw new NotImplementedException();
            }
        }
    }
}
