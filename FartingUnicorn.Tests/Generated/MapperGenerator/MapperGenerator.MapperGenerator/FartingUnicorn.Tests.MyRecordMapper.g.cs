// <auto-generated/>
using DotNetThoughts.Results;
using System.Text.Json;
using FartingUnicorn;

namespace FartingUnicorn.Tests;

// ClassName: MyRecord
// FullName: FartingUnicorn.Tests.MyRecord
// Namespace: FartingUnicorn.Tests
// Properties: 4
// HasCreateMapperAttribute: False
// ClassPath: 

// Property 0
// Name: Name
// CompleteType: string
// IsArray: False
// IsObject: False
// IsNullable: False
// IsOption: False
// RawType: System.String

// Property 1
// Name: Age
// CompleteType: int
// IsArray: False
// IsObject: False
// IsNullable: False
// IsOption: False
// RawType: System.Int32

// Property 2
// Name: Gender
// CompleteType: FartingUnicorn.Option<FartingUnicorn.Tests.Gender>
// IsArray: False
// IsObject: False
// IsNullable: False
// IsOption: True
// RawType: FartingUnicorn.Tests.Gender

// Property 3
// Name: Pet
// CompleteType: string?
// IsArray: False
// IsObject: False
// IsNullable: True
// IsOption: False
// RawType: System.String


public partial record MyRecord
{
    public static Result<MyRecord> MapFromJson(JsonElement jsonElement, MapperOptions mapperOptions = null, string[] path = null)
    {
        if (mapperOptions is null)
        {
            mapperOptions = new MapperOptions();
        }
        if (path is null)
        {
            path = ["$"];
        }
        if (jsonElement.ValueKind != JsonValueKind.Object)
        {
            return Result<MyRecord>.Error(new ValueHasWrongTypeError(path, "Object", jsonElement.ValueKind.ToString()));
        }
        var p_Name = default(string);
        var p_Age = default(int);
        var p_Gender = default(FartingUnicorn.Option<FartingUnicorn.Tests.Gender>);
        var p_Pet = default(string?);

        List<IError> errors = new();
        var isNamePropertyDefined = jsonElement.TryGetProperty("Name", out var jsonNameProperty);
        if (isNamePropertyDefined)
        {
            if (jsonNameProperty.ValueKind == JsonValueKind.Null)
            {
                errors.Add(new RequiredValueMissingError([.. path, "Name"]));
            }
            else if (jsonNameProperty.ValueKind == JsonValueKind.String)
            {
                p_Name = jsonNameProperty.GetString();
            }
            else
            {
                errors.Add(new ValueHasWrongTypeError([.. path, "Name"], "String", jsonNameProperty.ValueKind.ToString()));
            }
        }
        else
        {
            errors.Add(new RequiredPropertyMissingError([.. path, "Name"]));
        }
        var isAgePropertyDefined = jsonElement.TryGetProperty("Age", out var jsonAgeProperty);
        if (isAgePropertyDefined)
        {
            if (jsonAgeProperty.ValueKind == JsonValueKind.Null)
            {
                errors.Add(new RequiredValueMissingError([.. path, "Age"]));
            }
            else if (jsonAgeProperty.ValueKind == JsonValueKind.Number)
            {
                p_Age = jsonAgeProperty.GetInt32();
            }
            else
            {
                errors.Add(new ValueHasWrongTypeError([.. path, "Age"], "Number", jsonAgeProperty.ValueKind.ToString()));
            }
        }
        else
        {
            errors.Add(new RequiredPropertyMissingError([.. path, "Age"]));
        }
        var isGenderPropertyDefined = jsonElement.TryGetProperty("Gender", out var jsonGenderProperty);
        if (isGenderPropertyDefined)
        {
            if (jsonGenderProperty.ValueKind == JsonValueKind.Null)
            {
                p_Gender = new None<FartingUnicorn.Tests.Gender>();
            }
            else if (mapperOptions.TryGetConverter(typeof(FartingUnicorn.Tests.Gender), out IConverter customConverter))
            {
                if (jsonGenderProperty.ValueKind != customConverter.ExpectedJsonValueKind)
                {
                    errors.Add(new ValueHasWrongTypeError([.. path, "Gender"], customConverter.ExpectedJsonValueKind.ToString(), jsonGenderProperty.ValueKind.ToString()));
                }
                else
                {
                    var result = customConverter.Convert(typeof(FartingUnicorn.Tests.Gender), jsonGenderProperty, mapperOptions, [.. path, "Gender"]);
                    if (result.Success)
                    {
                        p_Gender = new Some<FartingUnicorn.Tests.Gender>(result.Map(x => (FartingUnicorn.Tests.Gender)x).Value);
                    }
                    else
                    {
                        errors.AddRange(result.Errors.Select(x => new MappingError([.. path, "Gender"], x.Message)).ToArray());
                    }
                }
            }
        }
        else
        {
            errors.Add(new RequiredPropertyMissingError([.. path, "Gender"]));
        }
        var isPetPropertyDefined = jsonElement.TryGetProperty("Pet", out var jsonPetProperty);
        if (isPetPropertyDefined)
        {
            if (jsonPetProperty.ValueKind == JsonValueKind.Null)
            {
                errors.Add(new RequiredValueMissingError([.. path, "Pet"]));
            }
            else if (jsonPetProperty.ValueKind == JsonValueKind.String)
            {
                p_Pet = jsonPetProperty.GetString();
            }
            else
            {
                errors.Add(new ValueHasWrongTypeError([.. path, "Pet"], "String", jsonPetProperty.ValueKind.ToString()));
            }
        }
        else
        {
            p_Pet = null;
        }
        if(errors.Any())
        {
            return Result<MyRecord>.Error(errors);
        }
        if(false)/*check if is option*/
        {
        }
        else
        {
            return Result<MyRecord>.Ok(new MyRecord(
                p_Name,
                p_Age,
                p_Gender,
                p_Pet
            ));
        }
        throw new NotImplementedException();
    }
}
