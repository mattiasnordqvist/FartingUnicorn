// <auto-generated/>
using DotNetThoughts.Results;
using System.Text.Json;
using static FartingUnicorn.MapperOptions;

namespace FartingUnicorn.Tests;

// ClassName: Comment
// FullName: FartingUnicorn.Tests.BigTests.Put.Comment
// Namespace: FartingUnicorn.Tests
// Properties: 3
// HasCreateMapperAttribute: False
// ClassPath: BigTests, Put

// Property 0
// Name: Text
// CompleteType: string
// IsArray: False
// IsObject: False
// IsNullable: False
// IsOption: False
// RawType: System.String

// Property 1
// Name: Upvotes
// CompleteType: int
// IsArray: False
// IsObject: False
// IsNullable: False
// IsOption: False
// RawType: System.Int32

// Property 2
// Name: Contact
// CompleteType: FartingUnicorn.Option<string>
// IsArray: False
// IsObject: False
// IsNullable: False
// IsOption: True
// RawType: System.String


public partial class BigTests
{
    public partial class Put
    {
        public partial class Comment
        {
            public static Result<Comment> MapFromJson(JsonElement jsonElement, MapperOptions mapperOptions = null, string[] path = null)
            {
                if (mapperOptions is null)
                {
                    mapperOptions = new MapperOptions();
                }
                if (path is null)
                {
                    path = ["$"];
                }
                if (jsonElement.ValueKind != JsonValueKind.Object)
                {
                    return Result<Comment>.Error(new ValueHasWrongTypeError(path, "Object", jsonElement.ValueKind.ToString()));
                }
                var obj = new Comment();

                List<IError> errors = new();
                var isTextPropertyDefined = jsonElement.TryGetProperty("Text", out var jsonTextProperty);
                if (isTextPropertyDefined)
                {
                    if (jsonTextProperty.ValueKind == JsonValueKind.Null)
                    {
                        errors.Add(new RequiredValueMissingError([.. path, "Text"]));
                    }
                    else if (jsonTextProperty.ValueKind == JsonValueKind.String)
                    {
                        obj.Text = jsonTextProperty.GetString();
                    }
                    else
                    {
                        errors.Add(new ValueHasWrongTypeError([.. path, "Text"], "String", jsonTextProperty.ValueKind.ToString()));
                    }
                }
                else
                {
                    errors.Add(new RequiredPropertyMissingError([.. path, "Text"]));
                }
                var isUpvotesPropertyDefined = jsonElement.TryGetProperty("Upvotes", out var jsonUpvotesProperty);
                if (isUpvotesPropertyDefined)
                {
                    if (jsonUpvotesProperty.ValueKind == JsonValueKind.Null)
                    {
                        errors.Add(new RequiredValueMissingError([.. path, "Upvotes"]));
                    }
                    else if (jsonUpvotesProperty.ValueKind == JsonValueKind.Number)
                    {
                        obj.Upvotes = jsonUpvotesProperty.GetInt32();
                    }
                    else
                    {
                        errors.Add(new ValueHasWrongTypeError([.. path, "Upvotes"], "Number", jsonUpvotesProperty.ValueKind.ToString()));
                    }
                }
                else
                {
                    errors.Add(new RequiredPropertyMissingError([.. path, "Upvotes"]));
                }
                var isContactPropertyDefined = jsonElement.TryGetProperty("Contact", out var jsonContactProperty);
                if (isContactPropertyDefined)
                {
                    if (jsonContactProperty.ValueKind == JsonValueKind.Null)
                    {
                        obj.Contact = new None<System.String>();
                    }
                    else if (jsonContactProperty.ValueKind == JsonValueKind.String)
                    {
                        obj.Contact = new Some<string>(jsonContactProperty.GetString());
                    }
                    else
                    {
                        errors.Add(new ValueHasWrongTypeError([.. path, "Contact"], "String", jsonContactProperty.ValueKind.ToString()));
                    }
                }
                else
                {
                    errors.Add(new RequiredPropertyMissingError([.. path, "Contact"]));
                }
                if(errors.Any())
                {
                    return Result<Comment>.Error(errors);
                }
                if(false)/*check if is option*/
                {
                }
                else
                {
                    return Result<Comment>.Ok(obj);
                }
                throw new NotImplementedException();
            }
        }
    }
}
