// <auto-generated/>
using DotNetThoughts.Results;
using System.Text.Json;
using FartingUnicorn;

namespace FartingUnicorn.Tests;

// ClassName: Author
// FullName: FartingUnicorn.Tests.Objects.NullableOptional.Author
// Namespace: FartingUnicorn.Tests
// Properties: 2
// HasCreateMapperAttribute: False
// ClassPath: Objects, NullableOptional

// Property 0
// Name: Name
// CompleteType: string
// IsArray: False
// IsObject: False
// IsNullable: False
// IsOption: False
// RawType: System.String

// Property 1
// Name: Age
// CompleteType: FartingUnicorn.Option<int>
// IsArray: False
// IsObject: False
// IsNullable: False
// IsOption: True
// RawType: System.Int32


public partial class Objects
{
    public partial class NullableOptional
    {
        public partial class Author
        {
            public static Result<Author> MapFromJson(JsonElement jsonElement, MapperOptions mapperOptions = null, string[] path = null)
            {
                if (mapperOptions is null)
                {
                    mapperOptions = new MapperOptions();
                }
                if (path is null)
                {
                    path = ["$"];
                }
                if (jsonElement.ValueKind != JsonValueKind.Object)
                {
                    return Result<Author>.Error(new ValueHasWrongTypeError(path, "Object", jsonElement.ValueKind.ToString()));
                }
                var p_Name = default(string);
                var p_Age = default(FartingUnicorn.Option<int>);

                List<IError> errors = new();
                var isNamePropertyDefined = jsonElement.TryGetProperty("Name", out var jsonNameProperty);
                if (isNamePropertyDefined)
                {
                    if (jsonNameProperty.ValueKind == JsonValueKind.Null)
                    {
                        errors.Add(new RequiredValueMissingError([.. path, "Name"]));
                    }
                    else if (jsonNameProperty.ValueKind == JsonValueKind.String)
                    {
                        p_Name = jsonNameProperty.GetString();
                    }
                    else
                    {
                        errors.Add(new ValueHasWrongTypeError([.. path, "Name"], "String", jsonNameProperty.ValueKind.ToString()));
                    }
                }
                else
                {
                    errors.Add(new RequiredPropertyMissingError([.. path, "Name"]));
                }
                var isAgePropertyDefined = jsonElement.TryGetProperty("Age", out var jsonAgeProperty);
                if (isAgePropertyDefined)
                {
                    if (jsonAgeProperty.ValueKind == JsonValueKind.Null)
                    {
                        p_Age = new None<System.Int32>();
                    }
                    else if (jsonAgeProperty.ValueKind == JsonValueKind.Number)
                    {
                        p_Age = new Some<int>(jsonAgeProperty.GetInt32());
                    }
                    else
                    {
                        errors.Add(new ValueHasWrongTypeError([.. path, "Age"], "Number", jsonAgeProperty.ValueKind.ToString()));
                    }
                }
                else
                {
                    errors.Add(new RequiredPropertyMissingError([.. path, "Age"]));
                }
                if(errors.Any())
                {
                    return Result<Author>.Error(errors);
                }
                if(false)/*check if is option*/
                {
                }
                else
                {
                    var obj = new Author();
                    obj.Name = p_Name;
                    obj.Age = p_Age;
                    return Result<Author>.Ok(obj);
                }
                throw new NotImplementedException();
            }
        }
    }
}
