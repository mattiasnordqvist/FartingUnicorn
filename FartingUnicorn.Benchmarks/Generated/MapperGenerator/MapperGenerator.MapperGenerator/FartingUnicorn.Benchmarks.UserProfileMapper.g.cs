// <auto-generated/>
using DotNetThoughts.Results;
using System.Text.Json;
using FartingUnicorn;

namespace FartingUnicorn.Benchmarks;

// ClassName: UserProfile
// FullName: FartingUnicorn.Benchmarks.UserProfile
// Namespace: FartingUnicorn.Benchmarks
// Properties: 1
// HasCreateMapperAttribute: False
// ClassPath: 

// Property 0
// Name: Name
// CompleteType: string
// IsArray: False
// IsObject: False
// IsNullable: False
// IsOption: False
// RawType: System.String


public partial class UserProfile
{
    public static Result<UserProfile> MapFromJson(JsonElement jsonElement, MapperOptions mapperOptions = null, string[] path = null)
    {
        if (mapperOptions is null)
        {
            mapperOptions = new MapperOptions();
        }
        if (path is null)
        {
            path = ["$"];
        }
        if (jsonElement.ValueKind != JsonValueKind.Object)
        {
            return Result<UserProfile>.Error(new ValueHasWrongTypeError(path, "Object", jsonElement.ValueKind.ToString()));
        }
        var p_Name = default(string);

        List<IError> errors = new();
        var isNamePropertyDefined = jsonElement.TryGetProperty("Name", out var jsonNameProperty);
        if (isNamePropertyDefined)
        {
            if (jsonNameProperty.ValueKind == JsonValueKind.Null)
            {
                errors.Add(new RequiredValueMissingError([.. path, "Name"]));
            }
            else if (jsonNameProperty.ValueKind == JsonValueKind.String)
            {
                p_Name = jsonNameProperty.GetString();
            }
            else
            {
                errors.Add(new ValueHasWrongTypeError([.. path, "Name"], "String", jsonNameProperty.ValueKind.ToString()));
            }
        }
        else
        {
            errors.Add(new RequiredPropertyMissingError([.. path, "Name"]));
        }
        if(errors.Any())
        {
            return Result<UserProfile>.Error(errors);
        }
        if(false)/*check if is option*/
        {
        }
        else
        {
            var obj = new UserProfile();
            obj.Name = p_Name;
            return Result<UserProfile>.Ok(obj);
        }
        throw new NotImplementedException();
    }
}
